name: MacOS
on: 
  push:
    branches: main
    tags:
      - 'X*'
jobs:
  buildApp:
    name: library
    runs-on: macos-latest
    env:
      MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
      MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
      TMP_PWD: hydrothermalfoam
      APPLEDEVELOPERID_APP: ${{ secrets.APPLEDEVELOPERID_APP }}
      QT_DIR: /usr/local/Cellar/qt@5/5.15.2
      Path_Pythons: /Users/runner/hostedtoolcache/Python
      AppInstaller: swEOS-MacOSX-Installer
    steps:
      # checkout source code
      - uses: actions/checkout@v2
      - name: install dependence
        run: |
          # brew install tcl-tk
          brew install swig
          brew install libomp
          brew install vtk@8.2
          export LDFLAGS="-L/usr/local/opt/vtk@8.2/lib"
          export CPPFLAGS="-I/usr/local/opt/vtk@8.2/include"
      
      # get short SHA of commit 
      - name: Add SHORT_SHA env property with commit short sha
        run: |
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
      - name: info 
        run: |
          cmake --version
          g++ --version
          echo ${{ github.ref }}
          echo "commit id short" ${SHORT_SHA}
          echo "github tag: " ${GIT_TAG}
          python --version
    # # debug workflow through ssh
    #   - name: install oh my zsh
    #     run: sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    #   - uses: actions/checkout@v2
    #   - name: Setup tmate session
    #     uses: mxschmitt/action-tmate@v3
      
      - name: compile library
        run: |
          mkdir Library/build
          cd Library/build
          cmake ..
          make install
          cd ../..
      - name: build command line app
        run: |
          mkdir -p commandline/build
          cd commandline/build
          cmake ..
          make 
      - name: build desktop app
        run: |
          mkdir -p desktop/build
          cd desktop/build
          cmake -DQt5_DIR=${QT_DIR}/lib/cmake/Qt5 -DVTK_DIR=/usr/local/opt/vtk@8.2/lib/cmake/vtk-8.2  -DCMAKE_INSTALL_PREFIX=./install ..
          make 
          ${QT_DIR}/bin/macdeployqt swEOS.app
          make install
          chmod 755 install/commandline/swEOS
          # mkdir install/CommandLineTool
          # cp ../../commandline/build/swEOS install/CommandLineTool
          echo ${MACOS_CERTIFICATE} | base64 --decode > certificate.p12
          security create-keychain -p ${TMP_PWD} signApp.keychain 
          security default-keychain -s signApp.keychain
          security unlock-keychain -p ${TMP_PWD} signApp.keychain
          security import certificate.p12 -k signApp.keychain -P ${MACOS_CERTIFICATE_PWD} -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k ${TMP_PWD} signApp.keychain
          # codesign --deep -fs "Developer ID Application: ${APPLEDEVELOPERID_APP}" --options=runtime --timestamp swEOS.app
          # codesign -vvv --deep --strict swEOS.app 
          # hdiutil create -srcfolder swEOS.app swEOS.dmg
          
          make package
          # 第一种方案：如果用户无法打开未被验证的app，只需要在终端运行：sudo spctl --master-disable 即可
          # 第二种方案：只对其中一个app进行开放：sudo xattr -r -d com.apple.quarantine /XXX/XXX.app/
      # - name: package
      #   run: |
      #     mkdir swEOS_OSX
      #     cp -rf Library/lib swEOS_OSX/
      #     cp -rf Library/API swEOS_OSX/
      #     cp -rf Library/include swEOS_OSX/
      #     cp commandline/build/swEOS swEOS_OSX/
      #     cp desktop/build/*.dmg swEOS_OSX/
      #     zip -r swEOS_OSX.zip swEOS_OSX
      - uses: actions/upload-artifact@v2
        with:
          name: swEOS_OSX_${{ env.SHORT_SHA }}
          path: desktop/build/${{env.AppInstaller}}.dmg
      
      # Build Python API with different python library versions
      - name: build python APIs
        run: |
          bash buildPythonAPIs.sh ${{ env.Path_Pythons }} dylib "-DBuild_API_tcl=ON"
          cp -rf Library/API/python API_Python_MacOSX
          zip -r API_Python_MacOSX.zip API_Python_MacOSX
      # upload python APIs with all python versions
      - uses: actions/upload-artifact@v2
        with:
          name: API_Python_MacOSX_${{ env.SHORT_SHA }}
          path: API_Python_MacOSX.zip

      # tag 上传Release
      - name: uploadRelease
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: desktop/build/${{env.AppInstaller}}.dmg
          asset_name: ${{env.AppInstaller}}.dmg
          tag: ${{ github.ref }}
          overwrite: true
      # tag upload Python APIs
      - name: uploadRelease
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: API_Python_MacOSX.zip
          asset_name: API_Python_MacOSX.zip
          tag: ${{ github.ref }}
          overwrite: true
